// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/ConsumedModel2.proto

package gen

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ConsumedModel2GRPCService service

func NewConsumedModel2GRPCServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ConsumedModel2GRPCService service

type ConsumedModel2GRPCService interface {
	TestClientCall(ctx context.Context, in *TestClientCallRequest, opts ...client.CallOption) (*TestClientCallResponse, error)
	TestClientCallReturnsEmpty(ctx context.Context, in *TestClientReturnsEmptyRequest, opts ...client.CallOption) (*emptypb.Empty, error)
}

type consumedModel2GRPCService struct {
	c    client.Client
	name string
}

func NewConsumedModel2GRPCService(name string, c client.Client) ConsumedModel2GRPCService {
	return &consumedModel2GRPCService{
		c:    c,
		name: name,
	}
}

func (c *consumedModel2GRPCService) TestClientCall(ctx context.Context, in *TestClientCallRequest, opts ...client.CallOption) (*TestClientCallResponse, error) {
	req := c.c.NewRequest(c.name, "ConsumedModel2GRPCService.testClientCall", in)
	out := new(TestClientCallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumedModel2GRPCService) TestClientCallReturnsEmpty(ctx context.Context, in *TestClientReturnsEmptyRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "ConsumedModel2GRPCService.testClientCallReturnsEmpty", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConsumedModel2GRPCService service

type ConsumedModel2GRPCServiceHandler interface {
	TestClientCall(context.Context, *TestClientCallRequest, *TestClientCallResponse) error
	TestClientCallReturnsEmpty(context.Context, *TestClientReturnsEmptyRequest, *emptypb.Empty) error
}

func RegisterConsumedModel2GRPCServiceHandler(s server.Server, hdlr ConsumedModel2GRPCServiceHandler, opts ...server.HandlerOption) error {
	type consumedModel2GRPCService interface {
		TestClientCall(ctx context.Context, in *TestClientCallRequest, out *TestClientCallResponse) error
		TestClientCallReturnsEmpty(ctx context.Context, in *TestClientReturnsEmptyRequest, out *emptypb.Empty) error
	}
	type ConsumedModel2GRPCService struct {
		consumedModel2GRPCService
	}
	h := &consumedModel2GRPCServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ConsumedModel2GRPCService{h}, opts...))
}

type consumedModel2GRPCServiceHandler struct {
	ConsumedModel2GRPCServiceHandler
}

func (h *consumedModel2GRPCServiceHandler) TestClientCall(ctx context.Context, in *TestClientCallRequest, out *TestClientCallResponse) error {
	return h.ConsumedModel2GRPCServiceHandler.TestClientCall(ctx, in, out)
}

func (h *consumedModel2GRPCServiceHandler) TestClientCallReturnsEmpty(ctx context.Context, in *TestClientReturnsEmptyRequest, out *emptypb.Empty) error {
	return h.ConsumedModel2GRPCServiceHandler.TestClientCallReturnsEmpty(ctx, in, out)
}
