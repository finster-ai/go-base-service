// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/BaseModel1.proto

// This is the example of the proto file for the GRPC endpoints that will be exposed by this micro service
// The endpoints and messages are defined here, if another service needs to call any of these GRPC endpoints
// it will need to import this proto file
//The logic of theses endpoints will be implemented in the grpc_handler folder, for this example in the BaseModel1GRPCService class

package gen

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for BaseModel1GRPCService service

func NewBaseModel1GRPCServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for BaseModel1GRPCService service

type BaseModel1GRPCService interface {
	ExampleCall(ctx context.Context, in *ExampleCallRequest, opts ...client.CallOption) (*ExampleCallResponse, error)
	ExampleCallReturnsEmpty(ctx context.Context, in *ExampleCallReturnsEmptyRequest, opts ...client.CallOption) (*emptypb.Empty, error)
}

type baseModel1GRPCService struct {
	c    client.Client
	name string
}

func NewBaseModel1GRPCService(name string, c client.Client) BaseModel1GRPCService {
	return &baseModel1GRPCService{
		c:    c,
		name: name,
	}
}

func (c *baseModel1GRPCService) ExampleCall(ctx context.Context, in *ExampleCallRequest, opts ...client.CallOption) (*ExampleCallResponse, error) {
	req := c.c.NewRequest(c.name, "BaseModel1GRPCService.ExampleCall", in)
	out := new(ExampleCallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseModel1GRPCService) ExampleCallReturnsEmpty(ctx context.Context, in *ExampleCallReturnsEmptyRequest, opts ...client.CallOption) (*emptypb.Empty, error) {
	req := c.c.NewRequest(c.name, "BaseModel1GRPCService.ExampleCallReturnsEmpty", in)
	out := new(emptypb.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BaseModel1GRPCService service

type BaseModel1GRPCServiceHandler interface {
	ExampleCall(context.Context, *ExampleCallRequest, *ExampleCallResponse) error
	ExampleCallReturnsEmpty(context.Context, *ExampleCallReturnsEmptyRequest, *emptypb.Empty) error
}

func RegisterBaseModel1GRPCServiceHandler(s server.Server, hdlr BaseModel1GRPCServiceHandler, opts ...server.HandlerOption) error {
	type baseModel1GRPCService interface {
		ExampleCall(ctx context.Context, in *ExampleCallRequest, out *ExampleCallResponse) error
		ExampleCallReturnsEmpty(ctx context.Context, in *ExampleCallReturnsEmptyRequest, out *emptypb.Empty) error
	}
	type BaseModel1GRPCService struct {
		baseModel1GRPCService
	}
	h := &baseModel1GRPCServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BaseModel1GRPCService{h}, opts...))
}

type baseModel1GRPCServiceHandler struct {
	BaseModel1GRPCServiceHandler
}

func (h *baseModel1GRPCServiceHandler) ExampleCall(ctx context.Context, in *ExampleCallRequest, out *ExampleCallResponse) error {
	return h.BaseModel1GRPCServiceHandler.ExampleCall(ctx, in, out)
}

func (h *baseModel1GRPCServiceHandler) ExampleCallReturnsEmpty(ctx context.Context, in *ExampleCallReturnsEmptyRequest, out *emptypb.Empty) error {
	return h.BaseModel1GRPCServiceHandler.ExampleCallReturnsEmpty(ctx, in, out)
}
